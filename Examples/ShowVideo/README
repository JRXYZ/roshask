There is a bit of complication in using cabal-install to build
executables that use SDL.

First, on Mac OS X, SDL will overwrite a user's main function, written
in C, so that it properly initializes the Cocoa runtime. To accomodate
this from Haskell, we have the file c_main.c, that provides a main
function for SDL to overwrite, and the SDLWrapper Haskell module that
exports a function the C code can call to start the Haskell program.

The issue is that SDLWrapper.hs must be compiled before c_main.c as it
is the compilation of SDLWrapper.hs that generates the files
SDLWrapper_stub.h and SDLWrapper_stub.c that are needed to compile
c_main.c. To this end, one must go into the "src" directory and run
the command "ghc -c SDLWrapper.hs" if the _stub files do not yet
exist. Once that is done, cabal-install can be used to build the rest
of the executable. Since the SDLWrapper mechanism is static, it is
reasonable to put the _stub files under source control so that this
tricky step need be taken only once.

Second, we must link with the libSDLMain.a library in order for the
Cocoa initialization to occur. This library is generated from
SDLMain.m and SDLMain.h found in the SDL development package
(specifically, we are using the NIB-less version of SDLMain.m). The
library that we will link with may be generated from these files by
the following commands:

gcc -c -arch i386 -arch x86_64 -I/Library/Frameworks/SDL.framework/Headers SDLMain.m -o SDLMain.o
ar r libSDLMain.a SDLMain.o
ranlib libSDLMain.a

